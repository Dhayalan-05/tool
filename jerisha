import os
import sqlite3
import shutil
import tempfile
import platform
import csv
import datetime
from pathlib import Path
import subprocess

def chrome_time_to_datetime(chrome_time):
    """Convert Chrome timestamp to datetime (Chrome stores time in microseconds since 1601)."""
    epoch_start = datetime.datetime(1601, 1, 1)
    return epoch_start + datetime.timedelta(microseconds=chrome_time)

def copy_history_file(src_path):
    """Copy locked DB to a temporary location."""
    temp_dir = tempfile.gettempdir()
    temp_path = os.path.join(temp_dir, "History_copy")
    shutil.copy2(src_path, temp_path)
    return temp_path

def extract_history(db_path, browser_name, writer):
    """Extract browsing history from DB and write to CSV."""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT urls.url, urls.title, urls.visit_count, urls.last_visit_time
            FROM urls
            ORDER BY last_visit_time DESC
        """)
        for url, title, visit_count, last_visit_time in cursor.fetchall():
            visit_time = chrome_time_to_datetime(last_visit_time) if last_visit_time else ""
            writer.writerow([browser_name, url, title, visit_count, visit_time])
        conn.close()
    except Exception as e:
        print(f"[{browser_name}] Error: {e}")

def get_browser_paths():
    """Return possible history file paths for different browsers and OS."""
    user_os = platform.system()
    paths = {}

    if user_os == "Windows":
        local = os.environ.get("LOCALAPPDATA")
        roaming = os.environ.get("APPDATA")
        paths = {
            "Chrome": os.path.join(local, r"Google\Chrome\User Data\Default\History"),
            "Edge": os.path.join(local, r"Microsoft\Edge\User Data\Default\History"),
            "Brave": os.path.join(local, r"BraveSoftware\Brave-Browser\User Data\Default\History"),
            "Firefox": os.path.join(roaming, r"Mozilla\Firefox\Profiles")
        }
    elif user_os == "Darwin":  # macOS
        paths = {
            "Chrome": str(Path.home() / "Library/Application Support/Google/Chrome/Default/History"),
            "Edge": str(Path.home() / "Library/Application Support/Microsoft Edge/Default/History"),
            "Brave": str(Path.home() / "Library/Application Support/BraveSoftware/Brave-Browser/Default/History"),
            "Safari": str(Path.home() / "Library/Safari/History.db"),
            "Firefox": str(Path.home() / "Library/Application Support/Firefox/Profiles")
        }
    elif user_os == "Linux":
        paths = {
            "Chrome": str(Path.home() / ".config/google-chrome/Default/History"),
            "Edge": str(Path.home() / ".config/microsoft-edge/Default/History"),
            "Brave": str(Path.home() / ".config/BraveSoftware/Brave-Browser/Default/History"),
            "Firefox": str(Path.home() / ".mozilla/firefox")
        }
    return paths

def extract_firefox_history(profile_path, writer):
    """Extract Firefox history (different DB schema)."""
    for root, dirs, files in os.walk(profile_path):
        for file in files:
            if file == "places.sqlite":
                db_path = os.path.join(root, file)
                temp_copy = copy_history_file(db_path)
                try:
                    conn = sqlite3.connect(temp_copy)
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT moz_places.url, moz_places.title, moz_places.visit_count, moz_historyvisits.visit_date
                        FROM moz_places
                        JOIN moz_historyvisits ON moz_places.id = moz_historyvisits.place_id
                        ORDER BY visit_date DESC
                    """)
                    for url, title, visit_count, visit_date in cursor.fetchall():
                        visit_time = datetime.datetime(1970,1,1) + datetime.timedelta(microseconds=visit_date)
                        writer.writerow(["Firefox", url, title, visit_count, visit_time])
                    conn.close()
                except Exception as e:
                    print(f"[Firefox] Error: {e}")
                finally:
                    os.remove(temp_copy)

def open_in_notepad(file_path):
    """Open a file in Notepad on Windows, or a simple text editor on other OS."""
    user_os = platform.system()
    try:
        if user_os == "Windows":
            subprocess.Popen(["notepad.exe", file_path])
        elif user_os == "Darwin":  # macOS
            subprocess.Popen(["open", "-a", "TextEdit", file_path])
        elif user_os == "Linux":
            subprocess.Popen(["gedit", file_path])  # assuming gedit installed
    except Exception as e:
        print(f"Could not open file automatically: {e}")

def main():
    output_file = "history.csv"
    paths = get_browser_paths()

    with open(output_file, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Browser", "URL", "Title", "Visit Count", "Last Visit Time"])

        for browser, path in paths.items():
            if "Firefox" in browser and os.path.exists(path):
                extract_firefox_history(path, writer)
            elif os.path.exists(path):
                temp_copy = copy_history_file(path)
                extract_history(temp_copy, browser, writer)
                os.remove(temp_copy)

    print(f"Browsing history exported to {output_file}")
    open_in_notepad(output_file)  # <-- Opens in Notepad/TextEdit/Gedit

if __name__ == "__main__":
    main()
